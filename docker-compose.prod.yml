version: '3.8'

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-rapbattles}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rapbattles_network

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - rapbattles_network

  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=postgresql+psycopg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-rapbattles}
      - REDIS_URL=redis://redis:6379/0
      - SIGNING_SECRET=${SIGNING_SECRET}
      - ADMIN_KEY=${ADMIN_KEY}
      - EVENT_DEFAULT_WINDOW=86400
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - rapbattles_network

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile.prod
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE=${API_BASE_URL:-http://localhost:8000}
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - rapbattles_network

volumes:
  postgres_data:
  redis_data:

networks:
  rapbattles_network:
    driver: bridge
